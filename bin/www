#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('integration:server');
var http = require('http');
var chokidar = require('chokidar');
const path = require('path');
const socketsConnected = []
let log = console.log.bind(console)

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const pathToWatch = appRoot + '/jms'
let ignoredPaths = [
  /[/\\]\./,
  // Ignore relative, top-level dotfiles as well (e.g. '.gitignore').
  /^\.[^/\\]/
]

let chokidarOpts = Object.assign({
  ignored: ignoredPaths,
  ignoreInitial: true
})


log('chokidar watching ', path.resolve(pathToWatch))
var watcher = chokidar.watch(pathToWatch, chokidarOpts).on('all', (event, onPath) => {
  let absolutePath = path.join(process.cwd(), onPath)  
  log('File ', onPath, ' emitted: ' + event)
  
  socketsConnected.forEach((socket) => {
    socket.emit(event, {path: onPath, absolutePath})
  })
})

io.on('connection', (socket) => {
  let index = socketsConnected.push(socket)
  log("We have connections : " + socketsConnected.length )
  socket.on('disconnect', () => {
    socketsConnected.splice(index - 1, 1)
  })

  socket.on('identification', (name) => {
    log('connected client: ' + name)
  }) 
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
